--------------------------------------------------------
--------------------- E3T5 SCHEMA 2 --------------------
--------------------------------------------------------
-- Behin e3t5schema.sql exekutatuta, logueatu SQL
-- Developer bitartez E3T5 erabiltzailearekin eta
-- ikasle123 pasahitzarekin eta script hau exekutatu.
--------------------------------------------------------
--  DDL for Trigger T_STOCK_GEHITU
--------------------------------------------------------
  CREATE OR REPLACE TRIGGER T_STOCK_GEHITU 
AFTER UPDATE ON ESKARI_HORNITZAILE FOR EACH ROW
 WHEN (NEW.EGOERA = 'Entregatuta') DECLARE
--KURSOREAN ESKARIAREN PRODUKTUAK GORDETZEN DIRA
CURSOR C_PRODUK IS SELECT ID_PRODUKTU, KOPURUA FROM ESKARI_LERRO_HORNITZAILE
WHERE ID_ESKARI = :NEW.ID;

V_BILTEGI INBENTARIO.ID_BILTEGI%TYPE;

BEGIN
    FOR PROD IN C_PRODUK
    LOOP
        --BEGIN ETA EXCEPTION ERABILTZEN DIRA IF BAT BEZALA, EZ BADA AURKITZEN EXCEPTION EXEKUTATZEN DA
        BEGIN
            --BILATZEN DA PRODUKTUA BILTEGIETAN BADAGO ETA BATEAN EGUNERATZEN DA KOPURUA
            SELECT ID_BILTEGI INTO V_BILTEGI FROM INBENTARIO WHERE ID_PRODUKTU = PROD.ID_PRODUKTU
            FETCH FIRST 1 ROWS ONLY;

            UPDATE INBENTARIO SET KOPURUA = KOPURUA + PROD.KOPURUA 
            WHERE ID_PRODUKTU = PROD.ID_PRODUKTU AND
            ID_BILTEGI = V_BILTEGI;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                INSERT INTO INBENTARIO VALUES (PROD.ID_PRODUKTU,1, PROD.KOPURUA);
        END;
    END LOOP;
END;
/
ALTER TRIGGER T_STOCK_GEHITU ENABLE;
--------------------------------------------------------
--  DDL for Procedure PASAHITZA_EGUNERATU
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE PASAHITZA_EGUNERATU (
    p_id IN ERABILTZAILEAK.ID%TYPE,
    p_erabiltzailea IN ERABILTZAILEAK.ERABILTZAILEA%TYPE,
    p_mota IN ERABILTZAILEAK.MOTA%TYPE,
    p_pasahitza_zaharra IN ERABILTZAILEAK.PASAHITZA%TYPE,
    p_pasahitza_berria IN ERABILTZAILEAK.PASAHITZA%TYPE
) AS
    v_count NUMBER;
BEGIN
    -- Lehenik eta behin egiaztatzen dugu ea erabiltzailea eta pasahitza bat egiten duten.
    SELECT COUNT(*)
    INTO v_count
    FROM ERABILTZAILEAK
    WHERE ID = p_id
      AND ERABILTZAILEA = p_erabiltzailea
      AND PASAHITZA = p_pasahitza_zaharra
      AND MOTA = p_mota;

    -- Ez badu aurkitzen exception bat emango du. Aurkitzen badu pasahitza eguneratuko du.
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Errorea: pasahitza okerra da.');
    ELSE
        UPDATE ERABILTZAILEAK
        SET PASAHITZA = p_pasahitza_berria
        WHERE ID = p_id
          AND ERABILTZAILEA = p_erabiltzailea
          AND PASAHITZA = p_pasahitza_zaharra
          AND MOTA = p_mota;
    END IF;
END;

/
--------------------------------------------------------
--  DDL for Procedure P_INFO_BEZERO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE P_INFO_BEZERO ( V_BEZERO_ID IN BEZERO.ID%TYPE,
V_ITZULI_DIRUA OUT NUMBER ) AS

V_BEZERO BEZERO%ROWTYPE;
V_GASTUA ESKARI_LERRO.SALNEURRIA%TYPE;
V_MAX_ID_ESKARI ESKARI_LERRO.ID_ESKARI%TYPE;
V_MAX_ESKARI ESKARI_LERRO.SALNEURRIA%TYPE;
V_PRODUKTU_MAX PRODUKTU.IZENA%TYPE;
V_PRO_GARESTIENA PRODUKTU.IZENA%TYPE;

--KURSORE BAT GORDETZEKO BERE ESKARIAREN BAT EGIN DUTEN SALTZAILE GUZTIAK
CURSOR C_SALTZAILE IS SELECT L.IZENA, L.ABIZENA FROM LANGILE L JOIN ESKARI E ON E.ID_SALTZAILE = L.ID WHERE ID_BEZERO = V_BEZERO_ID
GROUP BY L.IZENA, L.ABIZENA ORDER BY COUNT(ID_SALTZAILE) DESC;

--KURTZORE BAT GORDETZEKO TOP 20 DAUDEN BEZERO GUZTIAK
CURSOR C_TOP IS SELECT E.ID_BEZERO FROM ESKARI E JOIN ESKARI_LERRO EL ON E.ID = EL.ID_ESKARI
GROUP BY E.ID_BEZERO ORDER BY SUM(KOPURUA * SALNEURRIA) DESC FETCH FIRST 20 ROWS ONLY;

V_KONT NUMBER := 0;
V_IVA NUMBER := 0;
V_TOP VARCHAR2(20):= 'BEZERO ARRUNTA';

BEGIN

    --GORDETZEN DITUGU BEZEROAREN INFORMEAN JARRIKO DITUGUN OPERAZIOAK BERE BARIABLEETAN
    --BEZEROAREN DATUAK
    SELECT * INTO V_BEZERO FROM BEZERO WHERE ID = V_BEZERO_ID;

    --GASTATU DUEN GUZTIA
    SELECT SUM(KOPURUA * SALNEURRIA) INTO V_GASTUA FROM ESKARI_LERRO WHERE ID_ESKARI IN
    (SELECT ID FROM ESKARI WHERE ID_BEZERO = V_BEZERO_ID);

    --ESKARI GAREZTIENA
    SELECT ID_ESKARI, MAX(KOPURUA * SALNEURRIA)AS MAXKOP INTO V_MAX_ID_ESKARI, V_MAX_ESKARI FROM ESKARI_LERRO WHERE ID_ESKARI IN
    (SELECT ID FROM ESKARI WHERE ID_BEZERO = V_BEZERO_ID) GROUP BY ID_ESKARI ORDER BY MAXKOP DESC FETCH FIRST 1 ROWS ONLY;

    --GEHIEN ESKATU DUEN PRODUKTUA
    SELECT  P.IZENA INTO V_PRODUKTU_MAX FROM PRODUKTU P JOIN ESKARI_LERRO E ON P.ID = E.ID_PRODUKTU WHERE  ID_ESKARI IN
    (SELECT ID FROM ESKARI WHERE ID_BEZERO = V_BEZERO_ID) GROUP BY P.IZENA ORDER BY SUM(KOPURUA) DESC FETCH FIRST 1 ROWS ONLY;


    --ESKATU DUEN PRODUKTU GAREZTIENA
    SELECT  P.IZENA INTO V_PRO_GARESTIENA FROM PRODUKTU P JOIN ESKARI_LERRO E ON P.ID = E.ID_PRODUKTU WHERE  ID_ESKARI IN
    (SELECT ID FROM ESKARI WHERE ID_BEZERO = V_BEZERO_ID) GROUP BY P.IZENA ORDER BY SUM(E.SALNEURRIA) DESC FETCH FIRST 1 ROWS ONLY;

    --KONPROBATZEN DUGU BEZEROA GEHIEN GASTATU DUTEN BEZEROEN TOP-AN BADAGO.
     FOR TOP_BEZERO IN C_TOP
     LOOP
        V_KONT := V_KONT + 1;

        --BEZEROA TOP-EN KURSOREAN BADAGO BEGIRATZEN DU ZE POSIZIOAN KONTADOREAREKIN
        IF TOP_BEZERO.ID_BEZERO = V_BEZERO_ID THEN

            IF V_KONT <= 5 THEN
                V_IVA := 100;
                V_TOP := 'BEZERO TOP 5';

            ELSIF V_KONT > 5 AND V_KONT <11 THEN
                V_IVA := 50;
                V_TOP := 'BEZERO TOP 10';

            ELSE
                V_IVA := 20;
                V_TOP := 'BEZERO TOP 20';

            END IF;
            EXIT;

        END IF;
     END LOOP;

     --KALKULATZEN DA ITZULI BEHARREKO DIRUA, GASTATU DUEN TOTALAREKIN ETA BUELTATO BEHAR ZAION BEZAREKIN
     V_ITZULI_DIRUA := ROUND((V_GASTUA / 1.21) * 0.21 * (V_IVA / 100),2);

        DBMS_OUTPUT.PUT_LINE('********************************************');
        DBMS_OUTPUT.PUT_LINE('********** BEZEROAREN INFORMAZIOA **********');
        DBMS_OUTPUT.PUT_LINE('********************************************');
        DBMS_OUTPUT.PUT_LINE(' ');
        DBMS_OUTPUT.PUT_LINE(V_TOP);
        DBMS_OUTPUT.PUT_LINE('ITZULIKO ZAION BEZA: ' || V_ITZULI_DIRUA || '€');
        DBMS_OUTPUT.PUT_LINE('--------------------------------------------');
        DBMS_OUTPUT.PUT_LINE('ID: ' || V_BEZERO.ID);
        DBMS_OUTPUT.PUT_LINE('IZEN-ABIZENAK: '|| V_BEZERO.IZENA || ' ' || V_BEZERO.ABIZENA);
        DBMS_OUTPUT.PUT_LINE('--------------------------------------------');
        DBMS_OUTPUT.PUT_LINE('GASTU TOTALA: '|| V_GASTUA||'€');
        DBMS_OUTPUT.PUT_LINE('ESKARI HANDIENA: ' ||'ID-'|| V_MAX_ID_ESKARI ||'-'||' '|| V_MAX_ESKARI ||'€');
        DBMS_OUTPUT.PUT_LINE('GEHIEN ESKATUTAKO PRODUKTUA: ' || V_PRODUKTU_MAX );
        DBMS_OUTPUT.PUT_LINE('ESKATUTAKO PRODUKTU GARESTIENA: ' || V_PRO_GARESTIENA );
        DBMS_OUTPUT.PUT_LINE('--------------------------------------------');
        DBMS_OUTPUT.PUT_LINE('ARTATU DIOTEN SALTZAILEAK: ');

        FOR V_SALTZAILE IN C_SALTZAILE
        LOOP
            DBMS_OUTPUT.PUT_LINE('SALTZAILEA: ' || V_SALTZAILE.IZENA || ' ' || V_SALTZAILE.ABIZENA );
        END LOOP ;
        DBMS_OUTPUT.PUT_LINE('********************************************');

        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20010, 'BEZERO HORI EZ DA EXISTITZEN');
            V_ITZULI_DIRUA:= 0;
         WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERRORE EZEZAGUNA P_INFO_BEZERO PROZEDURAN: ' || SQLERRM );

END;

/
--------------------------------------------------------
--  DDL for Procedure P_PRODUKTU_PREZIOA_EGUNERATU
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE P_PRODUKTU_PREZIOA_EGUNERATU AS

CURSOR  C_PRODUKTU IS SELECT * FROM PRODUKTU FOR UPDATE;

V_SAL_BATAZ_BESTEKO NUMBER;
V_UNITATE NUMBER;
V_P_KOPURU NUMBER;
V_SALDUTAKO_UNITATE NUMBER;
V_PREZIO NUMBER;

E_SALDU_GABE EXCEPTION;

BEGIN
--KALKULATZEN DA ZENBAT PRODUKTU DESBERDIN SALDU DIREN HILEAN
SELECT COUNT(DISTINCT P.ID) INTO V_P_KOPURU FROM PRODUKTU  P JOIN ESKARI_LERRO EL ON EL.ID_PRODUKTU = P.ID
WHERE EL.ID_ESKARI IN (SELECT ID FROM ESKARI WHERE TO_CHAR(ESKAERA_DATA, 'MM/YY') = TO_CHAR(SYSDATE, 'MM/YY'));

--PRODUKTUAK EZ BADIRA SALDU SALBUESPENA JAURTITZEN DA
IF V_P_KOPURU = 0 THEN
  RAISE E_SALDU_GABE;
END IF;

--KALKULATZEN DA ZENBAT PRODUKTU UNITATE SALDU DIREN HILEAN GUZTIRA
SELECT SUM(KOPURUA)INTO V_UNITATE FROM ESKARI_LERRO WHERE ID_ESKARI IN (SELECT ID FROM ESKARI WHERE TO_CHAR(ESKAERA_DATA, 'MM/YY') = TO_CHAR(SYSDATE, 'MM/YY'));

--HILEKO SALMENTEN BATEZ BESTEKOA KALKULATZEN DA
V_SAL_BATAZ_BESTEKO := V_UNITATE / V_P_KOPURU;


FOR V_PRODUKTU IN C_PRODUKTU
LOOP
    --KALKULATZEN DA PRODUKTU BAKOITZAK SALDU DITUEN UNITATEAK
    SELECT NVL(SUM(KOPURUA), 0) INTO V_SALDUTAKO_UNITATE FROM  ESKARI_LERRO
    WHERE ID_PRODUKTU = V_PRODUKTU.ID
    AND ID_ESKARI IN (SELECT ID FROM ESKARI WHERE TO_CHAR(ESKAERA_DATA, 'MM/YY') = TO_CHAR(SYSDATE, 'MM/YY'));


    --PREZIOA SALDUTAKOAREN ARABERA EGUNERATZEN DA
    IF V_SALDUTAKO_UNITATE > V_SAL_BATAZ_BESTEKO THEN
        V_PREZIO := V_PRODUKTU.SALNEURRIA * 1.10;
    ELSIF V_SALDUTAKO_UNITATE < V_SAL_BATAZ_BESTEKO THEN
        V_PREZIO := V_PRODUKTU.SALNEURRIA * 0.9;
    ELSE
        V_PREZIO := V_PRODUKTU.SALNEURRIA;
    END IF;

    UPDATE PRODUKTU SET SALNEURRIA = V_PREZIO WHERE CURRENT OF C_PRODUKTU;

END LOOP;

COMMIT;

EXCEPTION
    WHEN E_SALDU_GABE THEN
        RAISE_APPLICATION_ERROR(-20010, 'EZ DIRA PRODUKTUAK SALDU');
    WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20011, 'DATUREN BAT FALTA DA');
     WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERRORE EZEZAGUNA P_PRODUKTU_PREZIOA_EGUNERATU PROZEDURAN: ' || SQLERRM );

END;

/
--------------------------------------------------------
--  DDL for Function F_KALKULATU_STOCK
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION F_KALKULATU_STOCK ( 
V_GAMA PRODUKTU.ID_KATEGORIA%TYPE, V_PREZIO PRODUKTU.SALNEURRIA%TYPE
) RETURN NUMBER AS

V_STOCK NUMBER;
E_GAMA_EZEGOKIA EXCEPTION;

BEGIN
    --GAMA EDO PREZIOA NULL BADA 5 KOPURUA BUELTATZEN DA
    IF V_GAMA IS NULL OR V_PREZIO IS NULL THEN
        RETURN 5; 
    END IF;

    --GAMEREN ARABERA PRODUKTU KOPURU BAT
    CASE V_GAMA
        WHEN 1 THEN V_STOCK := 10;
        WHEN 2 THEN V_STOCK := 15;
        WHEN 4 THEN V_STOCK := 20;
        WHEN 5 THEN V_STOCK := 25;
        ELSE RAISE E_GAMA_EZEGOKIA;
    END CASE;

    --PREZIOAREN ARABERA GEHITZEN DA BESTE KOPURU BAT
    IF V_PREZIO <= 200 THEN
        V_STOCK := V_STOCK + 20;
    ELSIF V_PREZIO >200 AND V_PREZIO < 500 THEN
        V_STOCK := V_STOCK +10;
    ELSE
        V_STOCK := V_STOCK +5;
    END IF;

    RETURN V_STOCK;

    EXCEPTION


    WHEN E_GAMA_EZEGOKIA THEN
        DBMS_OUTPUT.PUT_LINE('GAMA EZEGOKIA');
        RETURN 0;
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'ERRORE EZEZAGUNA F_KALKULATU_STOCK FUNTZIOAN' );
END;

/
--------------------------------------------------------
--  DDL for Procedure P_REESTOCK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE P_REESTOCK AS

V_MAX_ESKARI_ID ESKARI_HORNITZAILE.ID%TYPE;
V_MAX_LERRO_ID ESKARI_LERRO_HORNITZAILE.ID_LERRO%TYPE;

VBALIOA ESKARI_LERRO_HORNITZAILE.BALIOA%TYPE;
VSTOCK ESKARI_LERRO_HORNITZAILE.KOPURUA%TYPE;

--KURSORE BAT GORDETZEKO PRODUKTUAK BERE STOCK-A 16 BAINO GUTXIAGO DENA ETA EZ DAUDENAK JADA HORNITZAILEEI ESKATUAK
CURSOR CPRODUKTU IS SELECT ID, ID_KATEGORIA, SALNEURRIA, BALIOA FROM PRODUKTU 
WHERE ID IN (SELECT ID_PRODUKTU FROM INBENTARIO WHERE KOPURUA < 16)
AND ID NOT IN(SELECT L.ID_PRODUKTU FROM ESKARI_LERRO_HORNITZAILE L JOIN ESKARI_HORNITZAILE E ON L.ID_ESKARI =  E.ID 
WHERE EGOERA != 'Entregatuta' );

BEGIN
    --ESKARI BERRIA
    SELECT NVL(MAX(ID),0)+1 INTO V_MAX_ESKARI_ID FROM ESKARI_HORNITZAILE; 

    INSERT INTO ESKARI_HORNITZAILE VALUES(V_MAX_ESKARI_ID, SYSDATE, 'Bidaltzeko' );

    --KURTZOREAN DAUDEN PRODUKTUAK ESKARI LERROETAN INSERTATU, KANTITATEA JAKITEKO STOCK-A KALKULATZEKO FUNTZIOARI DEITZEN ZAIO
    FOR PRO IN CPRODUKTU
        LOOP
        VSTOCK := F_KALKULATU_STOCK(PRO.ID_KATEGORIA, PRO.SALNEURRIA);

        SELECT NVL(MAX(ID_LERRO),0)+1 INTO V_MAX_LERRO_ID FROM ESKARI_LERRO_HORNITZAILE WHERE ID_ESKARI = V_MAX_ESKARI_ID;
        INSERT INTO ESKARI_LERRO_HORNITZAILE (ID_ESKARI, ID_LERRO, ID_PRODUKTU, KOPURUA, BALIOA) VALUES(V_MAX_ESKARI_ID, V_MAX_LERRO_ID, PRO.ID, VSTOCK, PRO.BALIOA );
        END LOOP;
    COMMIT;
    EXCEPTION 
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERRORE EZEZAGUNA P_REESTOCK PROZEDURAN: ' || SQLERRM );
END;

/